---
title: "When Neighbours Play a Role"
author: "RNA Systems Biology Lab"
server:
  type: shiny
format:
  dashboard:
    nav-buttons:
      - icon: github
        href: https://github.com/GamaPintoLab/driver_neighbours_dashboard
        aria-label: GitHub
---

```{ojs}
//| output: false
bctdrivers = Array.from(new Set(transpose(bctresults).map(d => d.driver))).sort()
bctneighbours = Array.from(
  new Set(transpose(bctresults).filter(d => d.driver === bctdriver).map(d => d.neighbour))
).sort()

wctdrivers = Array.from(new Set(transpose(wctresults).map(d => d.driver))).sort()
wctneighbours = Array.from(
  new Set(transpose(wctresults).filter(d => d.driver === wctdriver).map(d => d.neighbour))
).sort()
```

# BCT

## Row {height=60%}

### {.sidebar}

```{ojs}
viewof bctdriver = Inputs.text({
  label: "Driver",
  placeholder: "Enter gene symbol...",
  datalist: bctdrivers,
  value: "DDX3X",
  submit: "Search",
  autocapitalize: "characters",
})
viewof bctneighbour = Inputs.select(bctneighbours, {
  label: "Neighbour",
  prompt: "Select neighbour",
  value: "PPIA"
})
viewof mutation_burden = Inputs.toggle({label: "corrected mutation frequency"})
```

### Column

```{ojs}
//| label: bctscatter
//| title: "Mutation Frequency vs Neighbour Expression"
//| padding: 10px
bctscatter = Plot.plot({
  marks: [
    Plot.dot(transpose(bctplot), {
      x: "expression",
      y: "frequency",
      stroke: "cancer_type",
      symbol: "cancer_type",
      fill: "cancer_type",
    })
  ],
  symbol: {legend: true, label: "Cancer Type"},
  x: {label: "Expression", labelOffset: 30},
  y: {label: "Frequency"},
  height: cards.bctscatter.height,
  width: cards.bctscatter.width,
  marginBottom: 70
})
```

## Row {height=40%}

### Column {width=25%}

```{ojs}
//| content: valuebox
//| title: "spearman rho"
rho = transpose(bctresults)
  .filter(d => d.driver === bctdriver && d.neighbour === bctneighbour)[0]
  .rho
  .toFixed(2)
Number(rho)
```

### Column {width=25%}

```{ojs}
//| content: valuebox
//| title: "p-value"
pvalue = transpose(bctresults)
  .filter(d => d.driver === bctdriver && d.neighbour === bctneighbour)[0]
  .rho_pval
  .toFixed(6)
Number(pvalue)
```

### Column {.tabset}

```{ojs}
//| label: mbscatterbct
//| title: "Mutation Burden vs Expression"
//| padding: 10px
Plot.plot({
  marks: [
    Plot.dot(transpose(bctplot), {
      x: "expression",
      y: "mutation_burden",
      stroke: "cancer_type",
      symbol: "cancer_type",
      fill: "cancer_type",
    })
  ],
  symbol: {legend: true, label: "Cancer Type"},
  x: {label: "Expression", labelOffset: 30},
  y: {label: "Mutation Burden"},
  height: cards.mbscatterbct.height,
  width: cards.mbscatterbct.width,
  marginBottom: 70
})
```

```{ojs}
//| label: bcttable
//| title: "BCT Results Table"
viewof bcttable = Inputs.table(transpose(bctresults).filter(d => d.driver === bctdriver), {
  columns: [
    "neighbour",
    "rho",
    "rho_pval",
  ],
  header: {
    neighbour: "Neighbour",
    rho: "Spearman Rho",
    rho_pval: "p-value",
  },
  rows: bctneighbours.length,
  select: false,
})
```

# WCT

## Row {height=60%}

### column {width=25%}

```{ojs}
//| content: valuebox
//| title: "regression coefficient"
//| color: secondary
coef = transpose(wctresults)
  .filter(d => d.driver === wctdriver && d.neighbour === wctneighbour)[0]
  .coef
  .toFixed(2)
Number(coef)
```

```{ojs}
//| content: valuebox
//| title: "p-value"
//| color: secondary
coefpvalue = transpose(wctresults)
  .filter(d => d.driver === wctdriver && d.neighbour === wctneighbour)[0]
  .coef_p
  .toFixed(6)
Number(coefpvalue)
```

### column {width=75%}

```{ojs}
//| content: card-toolbar
viewof wctdriver = Inputs.text({
  label: "Driver",
  placeholder: "Enter gene symbol...",
  datalist: wctdrivers,
  value: "YWHAE",
  submit: "Search",
  autocapitalize: "characters",
})
viewof wctneighbour = Inputs.select(wctneighbours, {
  label: "Neighbour",
  prompt: "Select neighbour",
  value: "MAPT"
})
```

```{ojs}
//| label: wctbox
//| title: "Neighbour Expression by Cancer Type"
//| padding: 10px
wctbox = Plot.plot({
  marks: [
    Plot.boxY(transpose(wctplot), {
      fx: "cancer_type",
      x: "mut_status",
      y: "expression",
      stroke: "mut_status",
      fill: "mut_status",
      fillOpacity: 0.6,
      strokeWidth: 1.5,
    })
  ],
  color: {legend: true, label: "Mutated"},
  x: {axis: null, label: null, paddingOuter: 0.2},
  fx: {padding: 0, label: "Cancer Type", labelOffset: 35, tickRotate: 0, tickSize: 0},
  y: {label: "Frequency", grid: true},
  height: cards.wctbox.height,
  width: cards.wctbox.width,
  marginBottom: 75,
})
```

## Row {height=40%}

### Column {.tabset}

```{ojs}
//| label: mbscatter
//| title: "Mutation Burden vs Expression"
//| padding: 10px
mbscatter = Plot.plot({
  marks: [
    Plot.dot(transpose(wctplot), {
      x: "expression",
      y: "mutation_burden",
    })
  ],
  x: {label: "Expression"},
  y: {label: "Mutation Burden"},
  height: cards.mbscatter.height,
  width: cards.mbscatter.width,
})
```

```{ojs}
//| label: mbbox
//| title: "Mutation Burden by Cancer Type"
//| padding: 10px
mbbox = Plot.plot({
  marks: [
    Plot.boxY(transpose(wctplot), {
      fx: "cancer_type",
      x: "mut_status",
      y: "mutation_burden",
      stroke: "mut_status",
      fill: "mut_status",
      fillOpacity: 0.6,
      strokeWidth: 1.5,
    })
  ],
  color: {legend: true, label: "Mutated"},
  x: {axis: null, label: null, paddingOuter: 0.2},
  fx: {padding: 0, label: "Cancer Type", labelOffset: 35, tickRotate: 0, tickSize: 0},
  y: {label: "Mutation Burden", grid: true},
  height: cards.mbbox.height,
  width: cards.mbbox.width,
  marginBottom: 75,
})
```

### Column {width=50%}

```{ojs}
//| label: wcttable
//| title: "WCT Results Table"
viewof wcttable = Inputs.table(transpose(wctresults).filter(d => d.driver === wctdriver), {
  columns: [
    //"driver",
    "neighbour",
    "coef",
    "coef_p",
  ],
  header: {
    //driver: "Driver",
    neighbour: "Neighbour",
    coef: "Regression Coefficient",
    coef_p: "p-value",
  },
  rows: wctneighbours.length,
  select: false,
})
```

# Supplementary Tables

## Row {height=50%}

```{ojs}
//| label: nettable
//| title: "Network Statistics"
viewof networktable = Inputs.table(transpose(networkstats), {
  header: {
    "network": "Network",
    "n_nodes": "# Nodes",
    "n_edges": "# Edges",
    "n_drivers": "# Drivers",
    "n_neighbours": "# Neighbours",
    "avg_degree": "Avg Degree",
    "avg_degree_drivers": "Avg Degree (Drivers)",
    "avg_degree_neighbours": "Avg Degree (Neighbours)",
  },
  layout: "auto",
  select: false,
})
```

## Row {height=50%}

```{ojs}
//| label: cttable
//| title: "Cancer Types"
viewof cttable = Inputs.table(transpose(cancertypes), {
  header: {
    "cancer_type": "Cancer Type",
    "n_samples": "# Samples",
    "mutation_burden": "Mutation Burden",
  },
  select: false,
  rows: wctneighbours.length,
})
```

```{R}
#| context: setup
library(tidyverse)
library(arrow)

bct_mutation_burden <- read_csv("data/bct_mutation_burden.csv")
wct_mutation_burden <- read_csv("data/mutation_burden.csv")
bctresults <- read.csv("data/bct_results.csv")
wctresults <- read.csv("data/wct_results.csv")
networkstats = read.csv("data/network_stats.csv")
cancertypes = read.csv("data/cancer_type.csv")
```

```{r}
#| output: false
ojs_define(bctresults, wctresults, networkstats, cancertypes)
```

```{R}
#| context: server
bctplot <- reactive({
  # req(input$bctdriver)
  # req(input$bctneighbour)
  mutationbct <- read_feather(str_c("data/drivers/", input$bctdriver, ".arrow"))
  expressionbct <- read_feather(str_c("data/neighbours/", input$bctneighbour, ".arrow"))
  bctplot <- mutationbct %>%
    inner_join(expressionbct, by = "patient") %>%
    group_by(cancer_type) %>%
    summarise(
      frequency = sum(frequency),
      expression = mean(expression)
    ) %>%
    inner_join(bct_mutation_burden, by = "cancer_type")
  if (input$mutation_burden) {
    bctplot <- bctplot %>% mutate(
      frequency = frequency / n_samples / mutation_burden
    )
  } else {
    bctplot <- bctplot %>% mutate(frequency = frequency / n_samples)
  }
  bctplot
})

wctplot <- reactive({
  # req(input$wctdriver)
  # req(input$wctneighbour)
  mutationwct <- read_feather(str_c("data/drivers/", input$wctdriver, ".arrow"))
  expressionwct <- read_feather(str_c("data/neighbours/", input$wctneighbour, ".arrow"))

  mutationwct %>%
    inner_join(expressionwct, by = "patient") %>%
    inner_join(wct_mutation_burden, by = "patient")
})
ojs_define(bctplot, wctplot)
```




